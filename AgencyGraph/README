NOTE: THIS IS A MARKDOWN f


#**README**
###`Short:`
This class creates a graph, it can either choose to randomly create it, or it can create a specific graph.
Each part of the graph is a graph node, which each contains a person.
The karma is the amount of times you can ask a certain person to spread the agency.
There is the ability to also do the following:


###`Detailed Description`
#####The graph is the main class that does the work
>It is constructed by its only constructor, which has no arguments.
One has to add a Graphnode to the Graph to start using the GraphNode, through the method addNode(GraphNode) . 
You can add an edge between two Graphnodes Through addEdge.
The final method which does all the work is the findPath method, which will display on the system how it navigates through the graph.

#####GraphNode is the object that will be in the graph and holding people
>It has one constructor, which takes in a person to hold
it has a few instance variables, which one holds a person, visited is for a queue in our transverse method, and numconnections which tells how many connections this class is connected to
it has a few getters, setters and changers. 
it also has a few overriden methods from object


#####People is the object which will be held by graphNode
>It has 2 constructors, that of a string where the string is the name of the person to create.
The other constructor creates a random name of 5 letters long, allowing for 11881376 total names.
each person has a identical id assigned to each of them.
they each have a randomly set karma, but you can use the .setKarma to change thier karma.
There are other getters, setters and incrementors.
There is also a toString Override.

#####Other Used Classes
>GraphEdge is a list of edges that connect 2 graph nodes together, and it has some overriden methods
ListIterator is a helper method that helps LList to sort
LLinked list is a helper class that helps graph and graph nodes to run, it works like a reular linked list with append, and remove
Node is a helping class that helps linked list to work, it holds the data
Queue is for the traveling method
The two exceptions are if the queue is too small or the stack is empty. Neither should be hit.



###`Testing`
-Random flat testing
>The agency tries to connect to as many people in the graph as it can.
It tends to vary from 20-70 %
out of a srs of 60 samples (yes i did run this trial 60 times), with 100!! nodes
we got an average of approximately 33.1167 %
we are 95% confident that the true mean of our program is 29-37 percent efficient
One of the biggest causes of this is our random graph generator. 
Sometimes, a large chunk of the graph might not have been connected, and as such the graph has to go missing.
Also, the Agency might get really unlucky and get only one additional friend(as opposed to the given 2), leading to much less choices


-Different nonRandom testing
>We have tested the choice that the program chooses on smaller scale graph(e.g. ~10 -20 nodes)
It has better results as the program automatically gives 2 nodes, and as such can get all the way to the high 90%